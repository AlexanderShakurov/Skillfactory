'''

Тестовое изменение для Git
Напишите декоратор, который будет сохранять результаты выполнения декорируемой функции в словаре.
 Словарь должен находиться в nonlocal области в следующем формате:
 по ключу располагается аргумент функции, по значению — результат работы функции, например, {n: f(n)}.

И при повторном вызове функции декоратор будет брать значение из словаря,
 а не вычислять заново. То есть словарь можно считать промежуточной памятью
 на время работы программы, где будут храниться ранее вычисленные значения.
 Исходная функция, которую нужно задекорировать имеет следующий вид и выполняет простое умножение на число 123456789:

def f(n):
   return n * 123456789
'''

def decorator_(func):
    d = {}

    def wrapper(*args, **kwargs):
        nonlocal d
        n = args[0]
        print(n)
        d[n] = d.get(n,func(*args, **kwargs))
        print(d)
        return d[n]


    return wrapper
@decorator_
def func(n):
    return n * 123456789
print(func(10))
print(func(20))
print(func(25))
print(func(10))